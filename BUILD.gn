import("//build/ohos.gni")
import("//third_party/wayland_standard/wayland_protocol.gni")

config("wayland_default_config") {
  cflags = [
    "-Wall",
    "-Werror",
    "-Wno-cast-qual",
    "-Wno-pointer-arith",
    "-Wno-unused-parameter",
    "-Wno-unused-variable",
  ]
}

## Generate Wayland Version {{{
action("wayland_version") {
  script = "gen_wayland_version_header_wrapper.sh"
  inputs = [ "src/wayland-version.h.in" ]
  outputs =
      [ "$root_gen_dir/" + rebase_path(get_path_info(inputs[0], "dir"), "//") +
        "/wayland-version.h" ]
  args = [
    rebase_path("gen_wayland_version_header.sh", root_build_dir),
    rebase_path("configure.ac", root_build_dir),
    rebase_path(inputs[0], root_build_dir),
    rebase_path(outputs[0], root_build_dir),
  ]
}

## Generate Wayland Version }}}

## Build wayland_scanner {{{
config("wayland_scanner_config") {
  visibility = [ ":*" ]

  include_dirs = [ "." ]

  cflags = [
    "-Wno-int-conversion",
    "-Wno-implicit-function-declaration",
  ]
}

ohos_executable("wayland_scanner") {
  install_enable = false

  sources = [ "src/scanner.c" ]

  configs = [ ":wayland_scanner_config" ]

  deps = [
    ":wayland_util",
    "//third_party/expat:expat",
  ]

  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

## Build wayland_scanner }}}

## Generate Wayland Protocols {{{
wayland_protocol("wayland_core_protocol") {
  sources = [ "protocol/wayland.xml" ]
}

## Generate Wayland Protocols }}}

## Build wayland_util.a {{{
config("wayland_util_config") {
  visibility = [ ":*" ]

  include_dirs = []

  cflags = []
}

config("wayland_util_public_config") {
  include_dirs = [
    "include/src",
    "include/protocol",
    "src",
  ]

  cflags = [ "-Wno-macro-redefined" ]
}

ohos_static_library("wayland_util") {
  sources = [
    "src/wayland-private.h",
    "src/wayland-util.c",
    "src/wayland-util.h",
  ]

  configs = [
    ":wayland_util_config",
    ":wayland_default_config",
  ]

  public_configs = [ ":wayland_util_public_config" ]

  deps = []

  public_deps = []
}

## Build wayland_util.a }}}

## Build libwayland_cursor.a {{{
config("libwayland_cursor_config") {
  visibility = [ ":*" ]

  include_dirs = [ "." ]

  cflags = [ "-Wno-macro-redefined" ]
}

config("libwayland_cursor_public_config") {
  include_dirs = [ "cursor" ]

  cflags = []
}

ohos_static_library("libwayland_cursor") {
  sources = [
    "cursor/os-compatibility.c",
    "cursor/wayland-cursor.c",
    "cursor/xcursor.c",
  ]

  configs = [
    ":wayland_default_config",
    ":libwayland_cursor_config",
  ]

  public_configs = [ ":libwayland_cursor_public_config" ]

  deps = []

  public_deps = [ ":wayland_core_protocol" ]
}

## Build libwayland_cursor.a }}}

## Build libwayland_client.a {{{
config("libwayland_client_config") {
  visibility = [ ":*" ]

  include_dirs = []

  cflags = []
}

config("libwayland_client_public_config") {
  include_dirs = [ "src" ]

  cflags = []
}

ohos_shared_library("libwayland_client.0") {
  sources = [
    "src/connection.c",
    "src/wayland-client.c",
    "src/wayland-os.c",
  ]

  configs = [
    ":wayland_default_config",
    ":libwayland_client_config",
  ]

  public_configs = [ ":libwayland_client_public_config" ]

  deps = [ "//third_party/libffi:ffi" ]

  public_deps = [
    ":wayland_core_protocol",
    ":wayland_version",
  ]
  symlink_target_name = [ "libwayland-client.so.0" ]
  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

## Build libwayland_client.a }}}
ohos_static_library("libwayland_client") {
  sources = [
    "src/connection.c",
    "src/wayland-client.c",
    "src/wayland-os.c",
  ]

  configs = [
    ":wayland_default_config",
    ":libwayland_client_config",
  ]

  public_configs = [ ":libwayland_client_public_config" ]

  deps = [ "//third_party/libffi:ffi" ]

  public_deps = [
    ":wayland_core_protocol",
    ":wayland_version",
  ]
}

## Build libwayland_client.a }}}

## Build libwayland_server.a {{{
config("libwayland_server_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "src",
    ".",
  ]

  cflags = [ "-Wno-macro-redefined" ]
}

config("libwayland_server_public_config") {
  include_dirs = []

  cflags = []
}

ohos_static_library("libwayland_server") {
  sources = [
    "src/connection.c",
    "src/event-loop.c",
    "src/wayland-os.c",
    "src/wayland-server.c",
    "src/wayland-shm.c",
  ]

  configs = [
    ":wayland_default_config",
    ":libwayland_server_config",
  ]

  public_configs = [ ":libwayland_server_public_config" ]

  deps = [
    ":wayland_util",
    "//third_party/libffi:ffi",
  ]

  public_deps = [ ":wayland_core_protocol" ]
}

## Build libwayland_server.a }}}
ohos_shared_library("libwayland_server.0") {
  sources = [
    "src/connection.c",
    "src/event-loop.c",
    "src/wayland-os.c",
    "src/wayland-server.c",
    "src/wayland-shm.c",
  ]

  configs = [
    ":wayland_default_config",
    ":libwayland_server_config",
  ]

  public_configs = [ ":libwayland_server_public_config" ]

  deps = [
    ":wayland_util",
    "//third_party/libffi:ffi",
  ]

  symlink_target_name = [ "libwayland-server.so.0" ]
  public_deps = [ ":wayland_core_protocol" ]
  part_name = "graphic_standard"
  subsystem_name = "graphic"
}
## Build libwayland_server.a }}}
